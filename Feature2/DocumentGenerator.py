import os
import io
import zipfile
from typing import Dict, Any

class DocumentGenerator:
    """
    This is a helper class for document generation. It does not include a main, but provides static methods for use. 
    It generates markdown content for test plans and test cases, and creates feature files in a zip format.
    If needed, you can create a main function to call these methods with the json files generated from previous steps.
    """
    @staticmethod
    def generate_test_plan_markdown(test_plan: Dict[str, Any]) -> str:
        """Generate markdown content for test plan"""
        markdown = "# Test Plan\n\n"
        
        for index, test_case in enumerate(test_plan['test_plan'], 1):
            markdown += f"## Objective {index}\n\n"
            markdown += f"### Overview\n{test_case['Objective']}\n\n"
            markdown += f"### Scope\n{test_case['Scope']}\n\n"
            markdown += "### Test Items\n\n"
            markdown += f"#### Types of Testing\n{test_case['Test_Items']['Types_of_Testing']}\n\n"
            markdown += f"#### Test Approach\n{test_case['Test_Items']['Test_Approach']}\n\n"
            markdown += "#### Acceptance Criteria\n\n"
            for idx, criteria in enumerate(test_case['Test_Items']['Acceptance_Criteria'], 1):
                markdown += f"{idx}. {criteria}\n"
            markdown += "\n---\n\n"
            markdown += f'> Generated by CoverIQ Test Planner\n\n'
        
        return markdown

    @staticmethod
    def generate_test_cases_markdown(test_cases: Dict[str, Any]) -> str:
        """Generate markdown content for test cases"""
        markdown = "# Test Cases\n\n"
        
        for objective_key, objective in test_cases.items():
            markdown += f"## {objective_key}\n\n"
            markdown += f"### Feature\n{objective['feature']}\n\n"
            
            for idx, description in enumerate(objective['bdd_style_descriptions'], 1):
                markdown += f"### Scenario {idx}\n\n"
                markdown += f"**Scenario:** {description['Scenario']}\n\n"
                markdown += "```gherkin\n"
                markdown += f"Given {description['Given']}\n"
                markdown += f"And {description['And']}\n"
                markdown += f"When {description['When']}\n"
                markdown += f"Then {description['Then']}\n"
                markdown += "```\n\n"
                markdown += "---\n\n"
            markdown += f'> Generated by CoverIQ Test Planner\n\n'
        
        return markdown

    @staticmethod
    def generate_feature_files(test_cases: Dict[str, Any]) -> bytes:
        """Generate feature files and return as zip bytes"""
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            feature_count = 1
            for objective_key, objective in test_cases.items():
                # Create feature file content
                feature_content = f"Feature: "
                feature_content += f" {feature_count}. {objective['feature']}\n\n"
                
                # Add scenarios
                for idx, description in enumerate(objective['bdd_style_descriptions'], 1):
                    feature_content += f"  Scenario: {idx}. {description['Scenario']}\n"
                    feature_content += f"    Given {description['Given']}\n"
                    feature_content += f"    And {description['And']}\n"
                    feature_content += f"    When {description['When']}\n"
                    feature_content += f"    Then {description['Then']}\n\n"
                feature_content += f"# Generated by CoverIQ Test Planner\n"
                
                # Add to zip file
                feature_filename = f"{objective_key.lower().replace(' ', '_')}.feature"
                zip_file.writestr(feature_filename, feature_content)
        
        zip_buffer.seek(0)
        return zip_buffer.getvalue()
    
